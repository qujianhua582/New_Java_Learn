package Java.Thread78_84;

/**
 * 线程的生命周期
 *
 * ① 出生
 *      new一个线程对象
 *
 * ② 就绪
 *      调用线程的start()方法,使线程准备就绪,以抢夺CPU资源,一个线程只能start一次
 *
 * ③ 执行
 *      抢夺CPU资源成功
 *          运行中的线程有三个去向:
 *          ① CPU被其他线程抢夺,线程会回到就绪状态
 *          ② 遇到异常并未修复 (异常死亡)  或  线程执行结束 (正常死亡)
 *          ③ 阻塞(详见下文)
 *          ④ yield() 让出本次抢夺资源机会,下次抢夺
 *
 * ④ 死亡
 *      遇到异常并未修复 (异常死亡)
 *      线程执行结束 (正常死亡)
 *
 * 阻塞状态
 *  ① 遇到耗时操作,如键盘输入,网络连接等
 *  ② sleep() 线程休眠
 *  ③ wait() 线程等待
 *  ④ join() 线程加塞(别的线程插队执行)
 *  ⑤ 等待线程锁
 */
public class ThreadLifeCycle_80 {
}
